name: Packer Workflow

on:
  push:
    branches:
      - assignment09

jobs:
  build:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Packer
        run: |
          curl -O https://releases.hashicorp.com/packer/${{ env.PACKER_VERSION }}/packer_${{ env.PACKER_VERSION }}_linux_amd64.zip
          unzip packer_${{ env.PACKER_VERSION }}_linux_amd64.zip
          sudo mv packer /usr/local/bin
        env:
          PACKER_VERSION: "1.10.0"

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Create zip file
        run: zip -r webapp-fork-main.zip .

      - name: Move zip file to packer folder
        run: mv webapp-fork-main.zip packer_files/

      - name: Initialize Packer
        run: cd packer_files && packer init .

      # - name: Build the Packer image
      #   run: cd packer_files && packer build -var "project_id=${{ secrets.PROJECT_ID }}" -var "zone=${{ secrets.ZONE }}" -var "source_image_family=${{ secrets.SOURCE_IMAGE_FAMILY }}" -var "machine_type=${{ secrets.MACHINE_TYPE }}" image.pkr.hcl

      - name: Get Latest Image Name
        id: image_name
        run: |
          IMAGE_NAME=$(gcloud compute images list --format="value(name)" --filter="name=centos-8-packer" --sort-by=~creationTimestamp --limit=1)
          echo "image_name=${IMAGE_NAME}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Create Instance Template
        run: |
          gcloud compute instance-templates create instance-template-202404054 \
            --machine-type=e2-medium \
            --network-interface=network=dev-vpc1,subnet=projects/dev-gcp-414600/regions/us-central1/subnetworks/backend-subnet \
            --instance-template-region=us-central1 \
            --service-account=${{ secrets.service_account }} \
            --scopes=cloud-platform \
            --create-disk=auto-delete=yes,boot=yes,image=${{ env.IMAGE_NAME }},size=100,type=pd-balanced \
            --metadata=startup-script="$(cat <<EOF
              #!/bin/bash
              cat <<INNER_EOF > /tmp/.env
              DB_USERNAME=${{ secrets.db_username }}
              DB_PASSWORD=${{ secrets.db_password }}
              DB_HOST=${{ secrets.db_host }}
              DB_NAME=${{ secrets.db_name }}
              PORT=8080
              INFRA=prod
              INNER_EOF
              sudo -u csye6225 cp /tmp/.env /tmp/webapp/
            EOF
            )"

      - name: Start Managed Instance Group Update
        run:  gcloud compute instance-groups managed set-instance-template appserver-igm --template=projects/dev-gcp-414600/regions/us-central1/instanceTemplates/instance-template-202404054 --region=us-central1

      - name: Get instance names in Managed Instance Group
        id: get-instances
        run: |
            INSTANCES=$(gcloud compute instance-groups managed list-instances appserver-igm --region=us-central1 --format="value(NAME)")
            echo "::set-output name=instances::$INSTANCES"

      - name: Start Managed Instance Group refresh of VM instances
        id: recreate-instances
        run: |
              INSTANCES="${{ steps.get-instances.outputs.instances }}"
              gcloud compute instance-groups managed recreate-instances appserver-igm --region=us-central1 --instances="$INSTANCES"

      - name: Wait for Instance Group Refresh to Complete
        id: wait-for-refresh
        run: |
          gcloud compute instance-groups managed wait-until appserver-igm --stable --region=us-central1 --quiet

      - name: Start PostgreSQL Service
        if: ${{ !contains(steps.status.outputs.service_status, 'running') }}
        run: sudo service postgresql start

      - name: Adjust Permissions on PostgreSQL Socket File
        run: sudo chmod 700 /var/run/postgresql/.s.PGSQL.5432 || true

      - name: Change PostgreSQL Password
        run: |
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"

      - name: Update PostgreSQL Authentication Method
        run: |
          sudo sed -i 's/^\(host.*all.*all.*\)\(ident\)\(.*\)$/\1md5\3/g' /etc/postgresql/14/main/pg_hba.conf

      - name: Restart PostgreSQL
        run: sudo systemctl restart postgresql

      - name: Create PostgreSQL Database
        run: |
          sudo -u postgres psql -c "CREATE DATABASE test01;"

      - name: Login to PostgreSQL
        run: |
          export PGPASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          psql -U postgres -h localhost -d postgres -c "SELECT version();"

      - name: Install Dependencies
        run: npm install

      - name: Create webapp.log file and grant write permissions
        run: |
          sudo touch /var/log/webapp.log
          sudo chmod 666 /var/log/webapp.log

      - name: Run Tests
        env:
          DB_USERNAME: ${{ secrets.POSTGRES_USER }}
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_DATABASE: ${{ secrets.POSTGRES_DB }}
          PORT: 5432
          WEB_SITE_PORT: 3000
          DB_HOST: ${{ secrets.POSTGRES_HOST }}
        run: npm test
